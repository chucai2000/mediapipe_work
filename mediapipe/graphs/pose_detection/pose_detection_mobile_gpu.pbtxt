# MediaPipe graph that performs face detection with TensorFlow Lite on GPU.
# Used in the examples in
# mediapipie/examples/android/src/java/com/mediapipe/apps/posedetectiongpu and
# mediapipie/examples/ios/posedetectiongpu.

# Images on GPU coming into and out of the graph.
input_stream: "input_video"
output_stream: "output_video"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for
# TfLiteTensorsToDetectionsCalculator downstream in the graph to finish
# generating the corresponding detections before it passes through another
# image. All images that come in while waiting are dropped, limiting the number
# of in-flight images between this calculator and
# TfLiteTensorsToDetectionsCalculator to 1. This prevents the nodes in between
# from queuing up incoming images and data excessively, which leads to increased
# latency and memory usage, unwanted in real-time mobile applications. It also
# eliminates unnecessarily computation, e.g., a transformed image produced by
# ImageTransformationCalculator may get dropped downstream if the subsequent
# TfLiteConverterCalculator or TfLiteInferenceCalculator is still busy
# processing previous inputs.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:rendered_frames"
  #input_stream: "FINISHED:render_data"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video"
}

# Transforms the input image on GPU to a 128x128 image. To scale the input
# image, the scale_mode option is set to FIT to preserve the aspect ratio,
# resulting in potential letterboxing in the transformed image.
node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE_GPU:throttled_input_video"
  output_stream: "IMAGE_GPU:transformed_input_video"
  # output_stream: "LETTERBOX_PADDING:letterbox_padding"
  node_options: {
    [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
      output_width: 257
      output_height: 353
      scale_mode: FILL_AND_CROP
    }
  }
}

# Converts the transformed input image on GPU into an image tensor stored as a
# TfLiteTensor.
node {
  calculator: "TfLiteConverterCalculator"
  input_stream: "IMAGE_GPU:transformed_input_video"
  output_stream: "TENSORS_GPU:image_tensor"
}

# Runs a TensorFlow Lite model on GPU that takes an image tensor and outputs a
# vector of tensors representing, for instance, detection boxes/keypoints and
# scores.
node {
  calculator: "TfLiteInferenceCalculator"
  input_stream: "TENSORS_GPU:image_tensor"
  output_stream: "TENSORS:detection_tensors"
  node_options: {
    [type.googleapis.com/mediapipe.TfLiteInferenceCalculatorOptions] {
      # model_path: "posenet_mobilenet_v1_100_257x257_multi_kpt_stripped.tflite"
      model_path: "mobilenet_v1_075_kpt_seg_parts_stripped_dilated.tflite"
    }
  }
}

# Decodes the detection tensors generated by the TensorFlow Lite model, based on
# the SSD anchors and the specification in the options, into a vector of
# detections. Each detection describes a detected object.
node {
  calculator: "PoseNetTensorsToDetectionsCalculator"
  input_stream: "TENSORS:detection_tensors"
  #output_stream: "RENDER_DATA:render_data"
  output_stream: "VIZ:rendered_frames"
  #output_stream: "SEGMENTATION:segmentation"
  #output_stream: "KEYPOINTS:keypoints"
}

node {
  calculator: "ImageFrameToGpuBufferCalculator"
  input_stream: "rendered_frames"
  output_stream: "output_video"
  input_side_packet: "GPU_SHARED:gpu_shared"
}

# Draws annotations and overlays them on top of the input images.
#node {
#  calculator: "AnnotationOverlayCalculator"
#  input_stream: "INPUT_FRAME_GPU:throttled_input_video"
#  input_stream: "render_data"
#  output_stream: "OUTPUT_FRAME_GPU:output_video"
#}
